name: Build and Release

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 0 * * 1"
    
permissions:
  contents: write
  
jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_bump.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Set Git name 
      run: git config --global user.name "Github Actions"
    - name: Set Git email 
      run: git config --global user.email "no@email.com"
    - name: Version Bump
      id: version_bump
      run: |
        python3 -m pip install toml toml-cli
        python3 bump.py patch
        echo version=`git describe --exact-match --tags` >> "$GITHUB_OUTPUT"
    - run: |
        echo "#!/bin/bash" > prepare_and_build.sh
        echo "export DEBIAN_FRONTEND=noninteractive" >> prepare_and_build.sh
        echo "apt update" >> prepare_and_build.sh
        echo "apt install -y python3 python3-pip python3-venv curl sudo clang-10 libclang-10-dev git software-properties-common" >> prepare_and_build.sh
        echo "add-apt-repository -y ppa:deadsnakes/ppa" >> prepare_and_build.sh
        echo "apt update" >> prepare_and_build.sh
        echo "apt install -y python3.8 python3.8-venv" >> prepare_and_build.sh
        echo "git config --global --add safe.directory '*'" >> prepare_and_build.sh
        echo "git log -1 --format=%h" >> prepare_and_build.sh
        echo "update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 100" >> prepare_and_build.sh
        echo "update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 100" >> prepare_and_build.sh
        echo "python3.8 -m venv pyenv" >> prepare_and_build.sh
        echo "source pyenv/bin/activate" >> prepare_and_build.sh
        echo "pip install -U pip setuptools" >> prepare_and_build.sh
        echo "python prepare.py" >> prepare_and_build.sh
        echo "source ~/.thalamusrc" >> prepare_and_build.sh
        echo "cmake --version" >> prepare_and_build.sh
        echo "python -m build -n -w -Crelease" >> prepare_and_build.sh
        chmod +x prepare_and_build.sh
        echo prepare_and_build.sh
        cat prepare_and_build.sh
        
    - name: Build
      uses: docker://ubuntu:18.04
      with:
        entrypoint: ./prepare_and_build.sh
    - name: Archive Distribution
      uses: actions/upload-artifact@v4
      with:
        name: linux-dist
        path: dist
    - run: git push --tags
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set Git name 
      run: git config --global user.name "Github Actions"
    - name: Set Git email 
      run: git config --global user.email "no@email.com"
    - name: Prepare
      run: python prepare.py
    - name: nasm
      shell: cmd
      run: echo %PATH% && echo %USERPROFILE% && dir %USERPROFILE%\nasm-2.15.05  && where nasm
    - name: Version Bump
      run: python bump.py patch
    - name: Build
      shell: cmd
      run: call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat" && set PATH=C:\Program Files\LLVM\bin;%PATH% && python -m build -n -w -Crelease
    - name: Archive Distribution
      uses: actions/upload-artifact@v4
      with:
        name: windows-dist
        path: dist
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: linux-dist
    - uses: actions/download-artifact@v4
      with:
        name: windows-dist
    - name: Get Paths
      id: paths
      run: |
        cd dist
        echo linux=`ls *linux*` >> "$GITHUB_OUTPUT"
        echo windows=`ls *win*` >> "$GITHUB_OUTPUT"
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{needs.build-linux.outputs.version}}
        release_name: Release ${{needs.build-linux.outputs.version}}
        draft: false
        prerelease: false
    - name: Upload Linux Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.paths.outputs.linux }}
        asset_path: dist/${{ steps.paths.outputs.linux }}
        asset_name: ${{ steps.paths.outputs.linux }}
        asset_content_type: application/x-wheel+zip
    - name: Upload Windows Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.paths.outputs.windows }}
        asset_path: dist/${{ steps.paths.outputs.windows }}
        asset_name: ${{ steps.paths.outputs.windows }}
        asset_content_type: application/x-wheel+zip
          
